(dirs tools client services static static/css)

(executable
 (public_name blibli)
 (name blibli)
 (modes
  exe
  (byte plugin)
  (native plugin))
 (libraries
  eliom.server
  ocsipersist-sqlite
  services
  ocsigenserver
  ocsigenserver.ext.staticmod
  ocsigenserver.ext.cors
  ocsigenserver.ext.accesscontrol)
 (embed_in_plugin_libraries services)
 (preprocess
  (pps
   lwt_ppx
   js_of_ocaml-ppx_deriving_json
   ocsigen-ppx-rpc
   --rpc-raw
   eliom.ppx.server)))

(rule
 (alias blibli)
 (deps
  blibli.cma
  client/blibli.bc
  client/blibli.bc.js
  tools/check_modules.ml
  dist)
 (action
  (run ocaml tools/check_modules.ml blibli)))

(env
 (_
  (flags
   (:standard -w -9-37-39))))

; Generate the Dune rules for copying the client modules.
; Defined here to avoid a dependency cycle with the (dynamic_include) stanza.

(rule
 (deps
  (glob_files *.eliom)
  (source_tree services))
 (action
  (with-stdout-to
   dune.client
   (run ocaml %{dep:tools/gen_dune.ml}))))

(rule
 (target
  (dir dist))
 (action
  (progn
   (bash
    "mkdir -p dist/{lib/blibli,var/{{log,data,www}/blibli,www/blibli/css,run}}")
   (bash "cp %{dep:client/blibli.bc.js} dist/var/www/blibli/blibli.js")
   (bash
    "cp %{dep:static/css/blibli.css} dist/var/www/blibli/css/blibli.css"))))
